#!/usr/bin/env node
'use strict';

let fs = require('fs');
let _ = require('lodash');
let util = require('util');

const WRAPPER = `// Copyright 2017 Bobby Powers. All rights reserved.
// Use of this source code is governed by the MIT
// license that can be found in the LICENSE file.

// DO NOT EDIT: auto-generated by ./support/build-stdlib.js

import { Map } from 'immutable';

/* tslint:disable: max-line-length */
`;

let requiredInputs = {};
_.filter(fs.readdirSync('stdlib'), f => !f.endsWith('~')).forEach(f => {
  requiredInputs[f.split('.')[0]] = 'stdlib/' + f;
});

const buildBundle = () => {
  let content = _.mapValues(requiredInputs, f =>
    fs
      .readFileSync(f)
      .toString('utf8')
      .trim(),
  );
  // 4096 is to leave room for the static content above, plus extra
  // variable declarations added below
  let bufLen = _.reduce(content, (sum, f) => sum + f.length, 1 * 1024 * 1024);

  let bundle = Buffer.alloc(bufLen);
  let off = bundle.write(WRAPPER);

  off += bundle.write(`export const xmileModels = Map<string, string>([`, off);

  for (let variable in content) {
    const value = JSON.stringify(content[variable]);
    off += bundle.write(
      `
  [
    '${variable}',
    `,
      off,
    );
    off += bundle.write(value, off);
    off += bundle.write('\n  ],', off);
  }

  off += bundle.write('\n]);\n', off);

  return bundle.toString('utf8', 0, off);
};

if (typeof require !== 'undefined' && require.main === module) {
  let contents = buildBundle();
  if (process.argv.length === 3) {
    fs.writeFileSync(process.argv[2], contents);
  } else {
    console.log(contents);
  }
}
